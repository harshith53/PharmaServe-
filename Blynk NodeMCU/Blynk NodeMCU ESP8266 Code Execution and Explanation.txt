Code Execution and Explanation for Smart Motion Detection System with Servo, Buzzer, and Blynk

This section explains how the code works step by step for the Smart Motion Detection System that utilizes the ESP8266, a servo motor, PIR motion sensor, LCD display, buzzer, and Blynk cloud integration.

1. Setup Libraries and Components

#include <NTPClient.h>               // Include NTPClient library to get time from NTP servers
#include <ESP8266WiFi.h>              // Include ESP8266 WiFi library to connect to WiFi
#include <WiFiUdp.h>                  // Include WiFi UDP library for NTP communication
#include <Wire.h>                     // Include Wire library for I2C communication
#include <LiquidCrystal_I2C.h>        // Include LiquidCrystal_I2C library to control the LCD screen
#include <TimeLib.h>                  // Include TimeLib library for easier date handling
#include <BlynkSimpleEsp8266.h>       // Include Blynk library to connect to the Blynk cloud
#include <Servo.h>                    // Include Servo library to control the servo motor

NTPClient: Used to fetch time from an NTP server.
ESP8266WiFi: To connect the ESP8266 to a Wi-Fi network.
WiFiUdp: A UDP protocol library used for communication with NTP servers.
Wire: Used for I2C communication with the LCD display.
LiquidCrystal_I2C: Controls the LCD with I2C interface.
TimeLib: Simplifies handling time and date from NTP.
BlynkSimpleEsp8266: Interface with the Blynk app for remote control and monitoring.
Servo: Allows control of the servo motor.

2. Define Constants and Variables

const char *ssid = " ";    // Wi-Fi SSID (network name)
const char *password =  " "// Wi-Fi password
#define BLYNK_AUTH_TOKEN  " "// Blynk Auth Token for connecting to Blynk app

LiquidCrystal_I2C lcd(0x27, 16, 2);  // Create an object for the LCD with I2C address 0x27 and 16x2 size
WiFiUDP ntpUDP;                      // Create a UDP object for NTP communication
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800, 60000); // Create NTP client object with UTC+5:30 time zone
Servo myServo;                       // Create Servo object to control the servo motor
Wi-Fi credentials are defined here (ssid and password) for connecting the ESP8266 to the network.
Blynk Auth Token: Youâ€™ll need to input your unique Blynk token received after creating a project in the Blynk app.
LCD Initialization: The I2C address (0x27) and screen size (16x2) for the LCD.
NTPClient Setup: To connect to pool.ntp.org for time retrieval with a UTC+5:30 time offset (India Standard Time).
Servo Motor Setup: To control the servo motor connected to a specific GPIO pin.

3. Pin Configuration and Initial Setup

#define BUZZER_PIN2  14              // Define GPIO pin 14 for Buzzer 2
#define MOTION_PIN   12              // Define GPIO pin 12 for IR motion sensor
#define SERVO_PIN    13              // Define GPIO pin 13 for Servo motor

unsigned long lastMotionTime = 0;    // Variable to store last motion detection time
const unsigned long debounceDelay = 500; // Set debounce delay to 500ms for motion sensor
bool irActive = false;               // Boolean to track the state of the IR sensor (active or not)
bool buzzerState2 = LOW;             // Boolean to store the state of Buzzer 2

BlynkTimer timer;                    // Create Blynk timer for periodic tasks
String arr_days[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}; // Array for days of the week
Pin Definitions: Define the GPIO pins for the buzzer, motion sensor, and servo motor.
Motion Detection: The motion sensor has a debounce time of 500ms to avoid false triggers.
IR Sensor State (irActive): Tracks whether motion is detected or not.
Blynk Timer (timer): Allows setting periodic tasks, like updating the IR sensor status.
Days Array: Holds the names of the days of the week for easy lookup.

4. Blynk App Control Functions

BLYNK_WRITE(V2) {                   // Blynk virtual pin V2 is for controlling Buzzer 2
  buzzerState2 = param.asInt();     // Get buzzer state from Blynk app
  digitalWrite(BUZZER_PIN2, buzzerState2); // Set Buzzer 2 state based on received value
}

BLYNK_WRITE(V3) {                   // Blynk virtual pin V3 is for controlling the Servo motor
  int servoPosition = param.asInt(); // Get servo position from Blynk app
  myServo.write(servoPosition);      // Set servo position based on received value
}

BLYNK_WRITE(V4) {                   // Blynk virtual pin V4 controls both LED and Buzzer 2 (not used for LED)
  int state = param.asInt();         // Get state value from Blynk app
  digitalWrite(BUZZER_PIN2, buzzerState2); // Set Buzzer 2 state based on received value
}

BLYNK_WRITE(V5) {                   // Blynk virtual pin V5 updates the IR sensor status
  if (irActive) {                   // If motion is detected
    Blynk.virtualWrite(V5, 1);       // Send "1" to Blynk app to indicate motion detected
  } else {
    Blynk.virtualWrite(V5, 0);       // Send "0" to Blynk app if no motion detected
  }
}

Blynk Virtual Pins:
V2: Controls the Buzzer through the Blynk app.
V3: Adjusts the Servo position based on a slider in the app.
V4: Updates the Buzzer state on the app, although primarily used for controlling the buzzer.
V5: Sends the motion detection status to the app, indicating whether motion is detected.

5. Update LCD Display

void updateLCD(String line1, String line2) {  // Function to update the LCD screen
  lcd.clear();                             // Clear the LCD screen
  lcd.setCursor(0, 0);                     // Set cursor to the beginning of the first line
  lcd.print(line1);                        // Print first line on LCD
  lcd.setCursor(0, 1);                     // Set cursor to the beginning of the second line
  lcd.print(line2);                        // Print second line on LCD
}

updateLCD(): This function clears the LCD and updates it with the current message, including motion detection or time details.

6. Handle Motion Detection

void handleMotionDetection() {            // Function to handle motion detection from the IR sensor
  int motionState = digitalRead(MOTION_PIN); // Read motion sensor input
  unsigned long currentTime = millis();    // Get the current time for debouncing

  if (motionState == LOW && (currentTime - lastMotionTime > debounceDelay)) {  // Motion detected
    if (!buzzerState2) {
      digitalWrite(BUZZER_PIN2, HIGH);    // Turn on Buzzer 2 when motion is detected
    }

    updateLCD(" Motion Detected", " Remainder");  // Update LCD with motion detected message
    irActive = true;                        // Set IR sensor status to active

    motionDetectionCount++;                 // Increment motion detection counter

    // Move servo based on motion detection count
    if (motionDetectionCount == 1) {
      myServo.write(90);                  // Move servo to 90 degrees
      Blynk.virtualWrite(V3, 90);          // Update servo position in Blynk app
    } else if (motionDetectionCount == 2) {
      myServo.write(180);                 // Move servo to 180 degrees
      Blynk.virtualWrite(V3, 180);         // Update servo position in Blynk app
    } else if (motionDetectionCount == 3) {
      myServo.write(270);                 // Move servo to 270 degrees
      Blynk.virtualWrite(V3, 270);         // Update servo position in Blynk app
    }

    if (motionDetectionCount >= 3) {       // Reset servo position after 3 detections
      motionDetectionCount = 0;            // Reset motion detection counter
      myServo.write(0);                    // Move servo back to 0 degrees
      Blynk.virtualWrite(V3, 0);            // Update servo position in Blynk app
    }

    Blynk.virtualWrite(V5, 1);              // Send "1" to Blynk to indicate motion detected

    lastMotionTime = currentTime;          // Update last motion detection time
  } else if (motionState == HIGH && irActive) { // If no motion detected
    irActive = false;                      // Set IR sensor status to inactive
  }
}

Motion Detection:
The function checks if the motion sensor detects motion and updates the LCD and servo accordingly.
It also updates the Blynk app to reflect motion detection status.

7. Setup Function (Initialization)

void setup() {
  Serial.begin(115200);                   // Start serial communication at 115200 baud rate
  pinMode(BUZZER_PIN2, OUTPUT);           // Set Buzzer 2 pin as output
  pinMode(MOTION_PIN, INPUT);             // Set motion sensor pin as input

  myServo.attach(SERVO_PIN);              // Attach the servo motor to the defined pin
  myServo.write(0);                       // Set servo to initial position (0 degrees)

  lcd.init();                             // Initialize the LCD screen
  lcd.backlight();                        // Turn on the LCD backlight
  lcd.setCursor(0, 0);                    // Set cursor to the first line
  lcd.print(" PHARMA SERVE");             // Print welcome message on LCD
  lcd.setCursor(0, 1);                    // Set cursor to the second line
  lcd.print(" G&H M&P");                  // Print additional information on LCD

  WiFi.begin(ssid, password);             // Connect to the Wi-Fi network
  while (WiFi.status() != WL_CONNECTED) { // Wait until connected to Wi-Fi
    delay(1000);
    Serial.println("Connecting to Wi-Fi...");
  }

  Serial.println("Connected to Wi-Fi");
  timeClient.begin();                     // Start the NTP client to get time
  Blynk.begin(BLYNK_AUTH_TOKEN, WiFi.ssid(), WiFi.password()); // Connect to Blynk app
}

setup():
Initializes the Wi-Fi connection.
Initializes the LCD and servo motor.
Sets up the motion sensor and buzzer.
Connects to Blynk using the provided Auth Token.

8. Loop Function (Continuous Monitoring)

void loop() {
  timeClient.update();                    // Update time from NTP server
  String formattedTime = timeClient.getFormattedTime(); // Get formatted time
  String formattedDate = arr_days[timeClient.getDay()] + " " + String(timeClient.getDay()) + "/" + String(timeClient.getMonth()) + "/" + String(timeClient.getYear());
  
  updateLCD(formattedTime, formattedDate); // Display time and date on LCD
  handleMotionDetection();                // Continuously check for motion detection
  Blynk.run();                            // Run Blynk app tasks
  timer.run();                            // Run Blynk timer for periodic tasks
}

loop():
Updates the time from the NTP server.
Calls the handleMotionDetection() function to monitor for motion.
Uses Blynk.run() to handle cloud communication with the Blynk app.
Calls timer.run() to execute periodic tasks like updating the app and controlling devices.

Final Thoughts
The Smart Motion Detection System integrates physical sensors and cloud control for real-time monitoring and interaction.
It uses the ESP8266 for Wi-Fi connectivity and the Blynk app for remote control and monitoring.
The NTP Client fetches real-time time and date, which is displayed on an LCD. The system responds to motion detection, triggers a buzzer, moves a servo motor, and provides feedback to the Blynk app.
This setup provides a fully connected, remote-controlled smart system that can be further customized based on user requirements.